% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prepare_factors.R
\name{prepare_factors}
\alias{prepare_factors}
\title{Preparing data for machine learning}
\usage{
prepare_factors(train, test = NULL, rare_count = 5L,
  rare_level = "rare", new_level = "other", ignore_na = TRUE,
  output_type = c("character", "factor", "integer"), encoding = NULL,
  return_mapping = FALSE)
}
\arguments{
\item{train}{Character. Possibly a feature column from a training data set.}

\item{test}{Character. Possibly a feature column from a test data set.}

\item{rare_count}{Integer. Levels with less manifestations than \code{rare_count} will get the \code{rare_level}.}

\item{rare_level}{Character. Specification of the new name for rare levels.}

\item{new_level}{Character. The level for manifestations that didn't show up in the training data.}

\item{ignore_na}{Logical. Should \code{NA}s \code{NA}?}

\item{output_type}{Character ("character", "factor" or "integer"). If \code{"factor"} the output always gets the levels \code{rare_level} and \code{other_level}.}

\item{encoding}{Character. Specifies the sorting of the levels / integers (when the \code{output_type} is not \code{"character"}.}

\item{return_mapping}{Logical. Should a mapping between integers and original characters be returned.}
}
\value{
A contatenated vector of `train` and `test` transformed and converted regarding the \code{output_type}.
}
\description{
Function to convert rare and new levels in test data
}
\examples{
### data
train <- dplyr::tibble(
stay_same  = c('a','a','a','a','a','b','b','a','b','b','b', NA, NA),
some_rare  = c('c','d','e','e','a','b','b','a','b','b','b', NA, NA),
some_new   = c('c','d','e','e','a','b','b','a','b','b','b', NA, NA),
integer    = c( 1L, 2L, 3L, 4L, 6L, 7L, 8L, 9L,10L,11L,12L,13L,14L),
logical    = c(  TRUE,  FALSE,  TRUE,  FALSE,  TRUE,  FALSE,  TRUE,
  FALSE,  TRUE,  FALSE,  TRUE,  FALSE,  TRUE))
test  <- dplyr::tibble(
stay_same  = c('a','a','a','a','a','b','b','a','b','b','b', NA, NA),
some_rare  = c('c','c','c','c','c','d','b','a','b','b','b', NA, NA),
some_new   = c('f','a','a','g','a','b','b','a','b','b','b', NA, NA),
integer    = c( 1L, 2L, 3L, 4L, 6L, 7L, 8L, 9L,10L,11L,12L,13L,14L),
logical    = c(  TRUE,  FALSE,  TRUE,  FALSE,  TRUE,  FALSE,  TRUE,  
FALSE,  TRUE,  FALSE,  TRUE,  FALSE,  TRUE))
### preparation
prepare_factors(train$some_new, test$some_new, output_type = "factor") 


}
